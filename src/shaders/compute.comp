#version 450
#extension GL_ARB_separate_shader_objects : enable
#define BUCKET_COUNT 50
#define BUCKET_FAR 50
#define TOLERANCE 0.9
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
	float orientationCullingEnabled;
	float frustumCullingEnabled;
	float distanceCullingEnabled;
} camera;

layout(set = 1, binding = 0) uniform ModelBufferObject {
    mat4 model;
};

layout(set = 2, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 3, binding = 0) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount;// = 1;
 	  uint firstVertex;// = 0;
 	  uint firstInstance;// = 0;
} numBlades;

layout(set = 3, binding = 1) buffer Blades {
	Blade blades[];
} blades;

layout(set = 3, binding = 2) buffer CulledBlades {
	Blade culledBlades[];
} culledBlades;

// This is not used. Initially, this was used to do bucket based distance culling.
// But the culled blades are not consistent, meaning the ones got binned in the bucket
// during frame 1 may not get binned in the bucket during frame 2, which will result
// in flashing and flickering. So I used the one described in the paper.

layout(set = 3, binding = 3) buffer BucketBladeCounts {
	uint bucketBladeCounts[];
} bucketBladeCounts;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inBounds(vec4 a)
{
	if(inBounds(a.x, abs(a.w) + TOLERANCE) &&
	inBounds(a.y, abs(a.w) + TOLERANCE) &&
	inBounds(a.z, abs(a.w) + TOLERANCE))
		return true;
	else
		return false;
}

// return [0, 1]
float WindMagnitude(float time, vec2 position2D)
{
	//return sin(time * (position2D.x * position2D.y));
	return sin(time);
}

// true if culled
bool OrientationCulling(vec3 front, vec3 v0)
{
	vec3 frontInCameraSpace = normalize((camera.view * model * vec4(front, 0.0)).xyz);
	vec3 positionInCameraSpace = normalize((camera.view * model * vec4(v0, 1)).xyz);

	if(abs(dot(frontInCameraSpace, -positionInCameraSpace)) < 0.2)
		return true;
	else
		return false;
}

// true if culled
bool DistanceCulling(vec3 v0, vec3 up, uint bladeId)
{
	vec3 positionInCameraSpace = (camera.view * model * vec4(v0, 1)).xyz;
	vec3 upInCameraSpace = normalize((camera.view * model * vec4(up, 0)).xyz);
	float dproj = length(positionInCameraSpace - upInCameraSpace * (dot(positionInCameraSpace, upInCameraSpace)));
	
	if(int(bladeId) % BUCKET_COUNT < int(BUCKET_COUNT * (dproj / BUCKET_FAR)))
		return true;

	return false;
}

// true if culled
bool FrustumCulling(vec3 v0, vec3 v1, vec3 v2)
{
	vec3 m = v0 / 4.0 + v1 / 2.0 + v2 / 4.0;
	vec4 m_new = camera.proj * camera.view * model * vec4(m, 1);
	vec4 v0_new = camera.proj * camera.view * model * vec4(v0, 1);
	vec4 v2_new = camera.proj * camera.view * model * vec4(v2, 1);
	if(inBounds(m_new) && inBounds(v0_new) && inBounds(v2_new))
		return false;
	else
		return true;
}

// true if culled
bool Culling(Blade blade, uint bladeId)
{
	float direction = blade.v0.w;
	vec3 front = vec3(cos(direction), 0, sin(direction));
	
	//return false;

	bool result = false;

	if(camera.orientationCullingEnabled > 0)
		result = result || OrientationCulling(front, blade.v0.xyz);

	if(camera.frustumCullingEnabled > 0)
		result = result ||  FrustumCulling(blade.v0.xyz, blade.v1.xyz, blade.v2.xyz);

	if(camera.distanceCullingEnabled > 0)
		result = result ||  DistanceCulling(blade.v0.xyz, blade.up.xyz, bladeId);

	return result;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		// initialize global variable every frame
		numBlades.vertexCount = 0;
		numBlades.instanceCount = 1;
		numBlades.firstVertex = 0;
		numBlades.firstInstance = 0;

	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	uint bladeId = gl_GlobalInvocationID.x;

	Blade blade = blades.blades[bladeId];
	float direction = blade.v0.w;
	float height = blade.v1.w;
	float stiffness = blade.up.w;
	vec3 front = vec3(cos(direction), 0, sin(direction));
	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
	vec3 v2 = blade.v2.xyz;

	// 1. gravity
	vec3 gE = -up * 9.8;

	// 2. front gravity
	vec3 gF = 0.25 * length(gE) * front;

	// 3. recovery force
	vec3 iv2 = v0 + up * height;
	vec3 fR = (iv2 - v2) * stiffness;

	// 4. wind force
	vec3 fW = WindMagnitude(totalTime, v0.xz) * vec3(1, 0, 0);

	vec3 tv2 = (fW + fR + gE + gF) * deltaTime;

	v2 += tv2;

	// 1. ground validation
	v2 = v2 - up * min(dot(up, (v2 - v0)), 0);

	// 2. calculate v1
	float lproj = length(v2 - v0 - up * dot((v2 - v0), up));
	vec3 v1 = v0 + height * up * max(1.0 - lproj / height, 0.05 * max(lproj / height, 1));

	// 3. length validation
	float L = (2 * length(v2 - v0) + length(v1 - v0) + length(v2 - v1)) / 3;
	float gama = height / L;
	vec3 v1_new = v0 + gama * (v1 - v0);
	vec3 v2_new = v1_new + gama * (v2 - v1);

	blade.v1.xyz = v1_new;
	blade.v2.xyz = v2_new;
	blades.blades[bladeId] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	
	if(!Culling(blade, bladeId))
	{
		uint culledBladeId = atomicAdd(numBlades.vertexCount, 1);
		culledBlades.culledBlades[culledBladeId] = blade;
	}
	
}
